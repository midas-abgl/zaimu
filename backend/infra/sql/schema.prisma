generator kysely {
    provider            = "prisma-kysely"
    output              = "./kysely"
    fileName            = "types.ts"
    decimalTypeOverride = "number"
    jsonTypeOverride    = "Record<string,any>"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userEmail       String        @db.VarChar(320)
    user            User          @relation(fields: [userEmail], references: [email])
    company         String        @db.VarChar(70)
    events          Event[]
    transactionsIn  Transaction[] @relation("Transaction_destination")
    transactionsOut Transaction[] @relation("Transaction_origin")
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @default(now())

    @@unique([userEmail, company])
}

model Event {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    type        String   @db.VarChar(15)
    accountId   String   @db.Uuid
    account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
    amount      Decimal  @db.Decimal(8, 2)
    date        DateTime @db.Timestamptz()
    description String?  @db.VarChar(1000)
    details     Json     @db.JsonB
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
}

model Transaction {
    id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    amount        Decimal  @db.Decimal(8, 2)
    date          DateTime @db.Timestamptz()
    description   String?  @db.VarChar(1000)
    categories    String[] @db.VarChar(50)
    recurrence    String?  @db.VarChar(26)
    repeatCount   Int?     @db.SmallInt
    originId      String?  @db.Uuid
    origin        Account? @relation("Transaction_origin", fields: [originId], references: [id], onDelete: Cascade)
    destinationId String?  @db.Uuid
    destination   Account? @relation("Transaction_destination", fields: [destinationId], references: [id], onDelete: Cascade)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now())
}

model User {
    email     String    @id @db.VarChar(320)
    password  String    @db.VarChar(128)
    accounts  Account[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now())
}
