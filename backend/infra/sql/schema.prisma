generator kysely {
    provider            = "prisma-kysely"
    output              = "./kysely"
    fileName            = "types.ts"
    decimalTypeOverride = "number"
    jsonTypeOverride    = "Record<string,any>"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userEmail            String                @db.VarChar(320)
    user                 User                  @relation(fields: [userEmail], references: [email])
    company              String                @db.VarChar(70)
    income               Json?                 @db.JsonB // { "amount": "number", "frequency": "string" }
    creditCard           Json?                 @db.JsonB // { "limit": "number", "statementDate": "number" }
    creditLine           Int?                  @db.Integer
    loans                Loan[]
    creditCardStatements CreditCardStatement[]
    transactionsIn       Transaction[]         @relation("Transaction_destination")
    transactionsOut      Transaction[]         @relation("Transaction_origin")
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @default(now())

    @@unique([userEmail, company])
}

model CreditCardStatement {
    id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    description   String?       @db.VarChar(1000)
    accountId     String        @db.Uuid
    account       Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
    amount        Decimal       @db.Decimal(8, 2)
    statementDate DateTime      @db.Date()
    dueDate       DateTime      @db.Date()
    payments      Transaction[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @default(now())
}

model Loan {
    id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    accountId   String        @db.Uuid
    account     Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
    date        DateTime      @db.Date()
    amount      Decimal       @db.Decimal(8, 2)
    installment Decimal       @db.Decimal(8, 2)
    months      Int           @db.SmallInt
    dueDate     Int           @db.SmallInt
    description String?       @db.VarChar(1000)
    payments    LoanPayment[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @default(now())
}

model LoanPayment {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    amount    Decimal  @db.Decimal(8, 2)
    date      DateTime @db.Date()
    loanId    String   @db.Uuid
    loan      Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Portfolio {
    id           String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String                 @db.VarChar(50)
    stocks       PortfolioStock[]
    transactions PortfolioTransaction[]
    userEmail    String                 @db.VarChar(320)
    user         User                   @relation(fields: [userEmail], references: [email])
    createdAt    DateTime               @default(now())
    updatedAt    DateTime               @default(now())
}

model PortfolioStock {
    portfolioId String    @db.Uuid
    portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
    ticker      String    @db.VarChar(7)
    stock       Stock     @relation(fields: [ticker], references: [ticker])
    allocation  Decimal   @db.Decimal(5, 2)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now())

    @@id([portfolioId, ticker])
}

model PortfolioTransaction {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    ticker      String    @db.VarChar(7)
    stock       Stock     @relation(fields: [ticker], references: [ticker])
    quantity    Int       @db.SmallInt
    price       Decimal   @db.Decimal(6, 2)
    totalFees   Decimal   @db.Decimal(7, 2)
    date        DateTime  @default(now()) @db.Date
    portfolioId String    @db.Uuid
    portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now())
}

model Stock {
    ticker       String                 @id @db.VarChar(7)
    pastTickers  String[]               @db.VarChar(7)
    transactions PortfolioTransaction[]
    allocations  PortfolioStock[]
    createdAt    DateTime               @default(now())
    updatedAt    DateTime               @default(now())
}

model Transaction {
    id            String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    amount        Decimal              @db.Decimal(8, 2)
    date          DateTime             @db.Date()
    description   String?              @db.VarChar(1000)
    categories    String[]             @db.VarChar(50)
    recurrence    String?              @db.VarChar(26)
    repeatCount   Int?                 @db.SmallInt
    eventId       String?              @db.Uuid
    event         CreditCardStatement? @relation(fields: [eventId], references: [id])
    originId      String?              @db.Uuid
    origin        Account?             @relation("Transaction_origin", fields: [originId], references: [id], onDelete: Cascade)
    destinationId String?              @db.Uuid
    destination   Account?             @relation("Transaction_destination", fields: [destinationId], references: [id], onDelete: Cascade)
    createdAt     DateTime             @default(now())
    updatedAt     DateTime             @default(now())
}

model User {
    email      String      @id @db.VarChar(320)
    password   String      @db.VarChar(128)
    accounts   Account[]
    portfolios Portfolio[]
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @default(now())
}
